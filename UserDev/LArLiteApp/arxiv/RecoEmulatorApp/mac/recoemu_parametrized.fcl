
EmuDriver: {
    MCTrackProducer:  mcreco
    MCShowerProducer: mcreco
    TrackEmulator:    TrackEmuToy
    ShowerEmulator:   ShowerEmuSmearingParametrized
    DisableXShift:  0

    TrackEmuToy:  {}

ShowerEmuSmearingParametrized: {

# efficiency function x-axis is energy [MeV], y-axis is reconstruction eff (0,1) 
EffFunc:   "((atan([1]*(x-[0]))/pi) + 0.5)"
# params
# 1st: slope at halfway point (actually gives the gradient at this point)
# 2nd: position of halfway point
EffParams: [5.0,0.5] 
EffMin:   0         # minimum energy
EffMax:   5000      # maximum energy to use in eff function

# energy resolution function. This is a relative resolution
# this parametrization represents the energy resolution @ 1 GeV of energy
# the energy resolution will be energy dependent and follow the form:
# Eres (E) = Eres(1GeV) / sqrt (E / 1 GeV)
EResFunc: "TMath::Gaus(x,[0],[1],1)"
# params:
# 1st param: center of gaussian ( 0 -> no offset in enerergy resolution)
# 2nd param: width of gaussian
EResParams: [0,0.1]
# minimum of function : -1 since this is a relative energy resolution
EResMin: -1
# maximum of function: +1 since this is a relative energy resolution
EResMax: 1

# angular resolution function.
# this is the smearing to be applied, in degrees, to the input angle
AngleResFunc: "TMath::Landau(x,[0],[1],1)"
# 1st param: MPV of lanadau (the "peak" smeaing angle)
# 2nd param: the width of the landau (how large the tail of the distribution will be)
AngleResParams: [5,5]
# miimum angle, should always be 0
AngleResMin: 0
# maximum angle, should always be 180
AngleResMax: 180

# position resolution function.
# this is an absolute resolution (in cm) and is gaussian.
# ( pos += pos_smearing )
PosResFunc: "TMath::Gaus(x,[0],[1],1)"
# params:
# 1st param: mean of gaussian (0 -> no offset)
# 2nd param: sigma of gaussian (0.3 would be a smearing = to wire-spacing)
PosResParams: [0,0.3]
# minimum of function (in cm)
PosResMin: -3
# maximum of function (in cm)
PosResMax: 3

# shower direction flipping
# this is the fraction of times the shower direction will be flipped
# this factor is applied uniformly for all showers. no energy depedence
DirectionFlipFrac: 0.05

# dedx resolution function.
# this is a fractional resolution ( dedx += dedx * frac_smearing )
dEdxResFunc: "TMath::Gaus(x,[0],[1],1)"
# params:
# 1st param: mean of gaussian smearing (0 -> no offset)
# 2nd param: smearing width
dEdxResParams: [0,0.2]
# minimum of function (since relative smearing -1 is good)
dEdxResMin: -1
# maximum of function (since relative smearing +1 is good)
dEdxResMax: 1

}


}